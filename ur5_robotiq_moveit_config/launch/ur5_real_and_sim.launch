<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- Simulation only -->
  <arg name="sim_only" default="true" />

  <!-- start gazebo with an empty plane -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" unless="sim_only">
    <arg name="world_name" default="worlds/empty.world"/>
  </include>

  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 0.0" respawn="false" output="screen"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find ur5_robotiq_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="real_robot" value="true" unless="$(arg sim_only)"/>
  </include>

  <include file="$(find ur_gazebo)/launch/controller_utils.launch" if="$(arg sim_only)"/>

  <!-- If needed, broadcast static tf for robot root -->

  <group ns="ur5_robotiq_joint_limited">

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find ur5_robotiq_control)/config/ur5_robotiq_control.yaml" command="load"/>

    <!--   <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/> -->
    <node name="arm_controller_spawner" pkg="controller_manager"
      type="spawner" respawn="true" output="screen" args="arm_trajectory_controller"/>

    <!--   <rosparam file="$(find ur_gazebo)/controller/arm_controller_ur5.yaml" command="load"/> -->
    <node name="hand_controller_spawner" pkg="controller_manager"
      type="spawner" respawn="true" output="screen" args="hand_trajectory_controller"/>

    <!-- Set the param that trajectory_execution_manager needs to find the controller plugin -->

    <rosparam file="$(find ur_gazebo)/controller/joint_state_controller.yaml" command="load" if="$(arg sim_only)"/>
    <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller"/>

    <!-- The rest of the params are specific to this plugin -->
    <!--<rosparam file="$(find ur5_robotiq_moveit_config)/config/fake_controllers.yaml"/>-->
  </group>

  <rosparam file="$(find ur5_robotiq_moveit_config)/config/controllers.yaml" if="$(arg sim_only)"/>

  <!-- UR driver consists of a single node - does not currrently follow ROS-I convention -->
  <node name="ur_driver" pkg="ur_driver" type="driver.py" args="192.168.1.155" output="screen" unless="$(arg sim_only)">
<!--     <remap from="follow_joint_trajectory/" to="joint_trajectory_action/"/> -->
    <remap from="follow_joint_trajectory/cancel" to="/ur5_robotiq_joint_limited/arm_trajectory_controller/cancel" />
    <remap from="follow_joint_trajectory/feedback" to="/ur5_robotiq_joint_limited/arm_trajectory_controller/follow_joint_trajectory/feedback" />
    <remap from="follow_joint_trajectory/goal" to="/ur5_robotiq_joint_limited/arm_trajectory_controller/follow_joint_trajectory/goal" />
    <remap from="follow_joint_trajectory/result" to="/ur5_robotiq_joint_limited/arm_trajectory_controller/follow_joint_trajectory/result" />
    <remap from="follow_joint_trajectory/status" to="/ur5_robotiq_joint_limited/arm_trajectory_controller/follow_joint_trajectory/status" />
  </node>

  <!-- Joint state publisher -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg sim_only)">
    <param name="/use_gui" value="false"/> 
    <rosparam param="/source_list">[/joint_states]</rosparam>
  </node>
  
  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" unless="$(arg sim_only)" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find ur5_robotiq_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>  
    <arg name="fake_execution" value="false" unless="$(arg sim_only)"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="load_robot_description" value="false" if="$(arg sim_only)"/>
    <arg name="joint_states_topic" value="ur5_robotiq_joint_limited/joint_states" if="$(arg sim_only)"/>
    <arg name="sim_only" value="false" unless="$(arg sim_only)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find ur5_robotiq_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find ur5_robotiq_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)"/>

</launch>
